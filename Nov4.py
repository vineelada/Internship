# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xfyE5szyY88BNxM2xK2hRy_A2grXNTLb
"""

def replacing_with_colon(text):
    # Replace space with a colon
    text = text.replace(' ', ':')
    # Replace comma with a colon
    text = text.replace(',', ':')
    # Replace dot with a colon
    text = text.replace('.', ':')
    return text

str1 = input("enter sentence")
result = replacing_with_colon(str1)
print(result)

#using pandas to create data frame
import pandas as pd
import re

data = {'SUMMARY': ['hello, world!', 'XXXXX test', '123four, five:; six...']}
df = pd.DataFrame(data)

# to define a regular expression pattern to match non-word characters and 'XXXXX'
pattern = r'[^\w\s]+|XXXXX'

# Applying the regular expression pattern to the SUMMARY column
df['SUMMARY'] = df['SUMMARY'].str.replace(pattern, '', regex=True)

print(df)

import re

def find_long_words_4(input_string):
    #a regular expression pattern to match words that are at least 4 characters long
    pattern = re.compile(r'\b\w{4,}\b')

    # to find all matching words in the input string
    long_words = pattern.findall(input_string)

    return long_words


str1 = input("enter a string")
result = find_long_words_4(str1)
print(result)

import re

def find_words_of_length_3_4_5(input_string):
    # Define a regular expression pattern to match words that are three, four, or five characters long
    pattern = re.compile(r'\b\w{3,5}\b')

    # Use the findall method to find all matching words in the input string
    matching_words = pattern.findall(input_string)

    return matching_words

# Test the function with a sample input string
str1 = input("enter a sentence")
result = find_words_of_length_3_4_5(str1)
print(result)

import re

def remove_parentheses(strings):
    # Compile a regular expression pattern to match parentheses
    pattern = re.compile(r'\(([^)]*)\)')

    # Iterate through the list of strings and retain the contents within the parentheses
    cleaned_strings = []
    for s in strings:
        cleaned_s = re.sub(pattern, r'\1', s)
        cleaned_strings.append(cleaned_s)

    return cleaned_strings

# Sample Text
str1 = ["example (.com)", "hr@fliprobo (.com)", "github (.com)", "Hello (Data Science World)", "Data (Scientist)"]

# Remove parentheses while retaining contents from the sample text
cleaned_text = remove_parentheses(str1)

# Print the cleaned text
for s in cleaned_text:
    print(s)

import re

def remove_parentheses(strings):
    cleaned_strings = []
    pattern = re.compile(r'\s*\([^)]*\)')

    for string in strings:
        cleaned_string = pattern.sub('', string)
        cleaned_strings.append(cleaned_string.strip())

    return cleaned_strings

sample_text = ["example (.com)", "hr@fliprobo (.com)", "github (.com)", "Hello (Data Science World)", "Data (Scientist)"]
result = remove_parentheses(sample_text)

for cleaned_string in result:
    print(cleaned_string)

import re

text = input("enter a text\n")

# Use re.findall() to split the string into uppercase letters
uppercase_letters = re.findall(r'[A-Z][a-z]*', text)

# Join the uppercase letters back into a string
result = ' '.join(uppercase_letters)

# Print the result
print(result)

import re

def insert_spaces_between_numbers(text):
    # insert spaces with double spaces between words starting with numbers
    modified_text = re.sub(r'(\D)(\d)', r'\1  \2', text)
    return modified_text

# Sample Text
str1 = input("enter a string")

# Call the function to insert spaces
result = insert_spaces_between_numbers(str1)

# Print the result
print(result)

import re

def insert_spaces(text):
    #insert spaces between words starting with capital letters or numbers
    modified_text = re.sub(r'([A-Z0-9][a-z]*)', r' \1', text)
    return modified_text

# text
str1 = input("Enter a sample text")

# Call the function to insert spaces
result = insert_spaces(str1)

# Print the result
print(result)

import pandas as pd

# URL to the CSV file
url = "https://raw.githubusercontent.com/dsrscientist/DSData/master/happiness_score_dataset.csv"

# Read the data from the URL into a DataFrame
df = pd.read_csv(url)

# Creating a new column 'first_five_letters' with the first 6 letters of each country
df['first_five_letters'] = df['Country'].str[:6]


print(df)

import re

def is_valid_string(s):
    pattern = r'^[a-zA-Z0-9_]*$'
    return bool(re.match(pattern, s))

# Test case
str1 = input("enter a string")

if is_valid_string(str1):
    print(f"'{str1}' is a valid string.")
else:
    print(f"'{str1}' is not a valid string.")

def starts_with_number(input_string, number):
    # Check if the string starts with the specified number
    return input_string.startswith(str(number))

# Test the function with a sample string and number
number = int(input("Enter a desired number"))
string = input("enter a string")


if starts_with_number(string, number):
    print(f'The string "{string}" starts with the number {number}.')
else:
    print(f'The string "{string}" does not start with the number {number}.')

def remove_leading_zeros(ip_address):
    # Spliting the IP address into octets
    octets = ip_address.split('.')

    # Processing each octet to remove leading zeros
    cleaned_octets = [str(int(octet)) for octet in octets]

    # Joining the cleaned octets back together to form the cleaned IP address
    cleaned_ip = '.'.join(cleaned_octets)

    return cleaned_ip


ip_address = "192.001.020.003"
cleaned_ip = remove_leading_zeros(ip_address)
print(cleaned_ip)

import re

# Define the regular expression pattern
pattern = r'\b(?:January|February|March|April|May|June|July|August|September|October|November|December)\s+\d{1,2}(?:st|nd|rd|th)?\s+\d{4}\b'

# Read the text from the file
with open('/content/sample_data/Sample', 'r') as file:
    text = file.read()

# Search for the date string in the text
match = re.search(pattern, text)

if match:
    date_string = match.group(0)
    print("Extracted Date:", date_string)
else:
    print("Date not found in the text.")

sample_text = input("Enter a sentence: ")
searched_words = ['Vineela', 'Flip', 'robo']

for word in searched_words:
    if word in sample_text:
        print(f"'{word}' found in the text.")
    else:
        print(f"'{word}' not found in the text.")

sample_text = input("Enter a sentence: ")
searched_word = 'flip'

# Find the location of the searched word in the text
location = sample_text.find(searched_word)

if location != -1:
    print(f"'{searched_word}' found in the text at position {location}.")
else:
    print(f"'{searched_word}' not found in the text.")

sample_text = input("Enter your sentence: ")
pattern = input("Enter your pattern: ")
start = 0

while start < len(sample_text):
    start = sample_text.find(pattern, start)
    if start == -1:
        break
    print(f"Found '{pattern}' at position {start}.")
    start += len(pattern)

import re

sample_text = input("Enter a string")
pattern = input("Enter your pattern")

# Use re.finditer to find all occurrences and their positions
matches = [match for match in re.finditer(pattern, sample_text)]

if matches:
    print(f"Occurrences of '{pattern}':")
    for match in matches:
        print(f"Found at position {match.start()}")
else:
    print(f"No occurrences of '{pattern}' found in the text.")

from datetime import datetime

def convert_date_format(date_string):
    # Parse the input date in 'yyyy-mm-dd' format
    date_obj = datetime.strptime(date_string, '%Y-%m-%d')

    # Format the date in 'dd-mm-yyyy' format
    formatted_date = date_obj.strftime('%d-%m-%Y')

    return formatted_date

# Test the function with a sample date
date_string = input("Enter date in yyyy-mm-dd format: ")
formatted_date = convert_date_format(date_string)
print("Original Date (yyyy-mm-dd):", date_string)
print("Formatted Date (dd-mm-yyyy):", formatted_date)

import re

def find_decimal_numbers(input_string):
    # Define a regular expression pattern to match decimal numbers with a precision of 1 or 2
    pattern = re.compile(r'\b\d+\.\d{1,2}\b')

    # Use the findall method to find all matching numbers in the input string
    decimal_numbers = pattern.findall(input_string)

    return decimal_numbers

# Test the function with a sample input string
input_string = input("Enter string of decimal numbers:")
result = find_decimal_numbers(input_string)
print(result)

import re

def separate_numbers_with_positions(input_string):
    # Define a regular expression pattern to find numbers in the string
    pattern = re.compile(r'\d+')

    # Use the finditer method to find numbers and their positions
    number_matches = pattern.finditer(input_string)

    for match in number_matches:
        number = match.group()  # Get the matched number
        start_position = match.start()  # Get the start position of the match
        end_position = match.end()  # Get the end position of the match
        print(f"Number: {number}, Position: ({start_position}, {end_position})")

# Test the function with a sample input string
input_string = input("Enter your string:")
separate_numbers_with_positions(input_string)

import re

def extract_maximum_numeric_value(input_string):
    # Define a regular expression pattern to match numeric values
    pattern = re.compile(r'\b\d+\b')

    # Use the findall method to find all numeric values in the input string
    numeric_values = pattern.findall(input_string)

    if numeric_values:
        max_numeric_value = max(map(int, numeric_values))
        return max_numeric_value
    else:
        return None

# Test the function with a sample input string
input_string = input("Enter your list: ")
result = extract_maximum_numeric_value(input_string)

if result is not None:
    print("Maximum numeric value:", result)
else:
    print("No numeric values found in the text.")

import re

def insert_spaces_between_capital_words(input_string):
    # Use regular expression to insert spaces between words starting with capital letters
    modified_string = re.sub(r'(?<=[a-z])([A-Z])', r' \1', input_string)
    return modified_string

# Test the function with a sample input string
input_string = input("Enter a sentence")
result = insert_spaces_between_capital_words(input_string)
print(result)

import re

text = input("Enter a sentence")

pattern = r'[A-Z][a-z]+'

matches = re.findall(pattern, text)

for match in matches:
    print(match)

import re

def remove_continuous_duplicate_words(input_string):
    # Use regular expression to remove continuous duplicate words
    pattern = r'\b(\w+)( \1)+\b'
    modified_string = re.sub(pattern, r'\1', input_string)
    return modified_string

# Test the function with a sample input string
input_string = input("Enter s sentence")
result = remove_continuous_duplicate_words(input_string)
print(result)

import re

def is_string_ending_with_alphanumeric(input_string):
    # Define a regular expression pattern to match strings ending with an alphanumeric character
    pattern = re.compile(r'^.*[A-Za-z0-9]$')

    if pattern.match(input_string):
        return True
    else:
        return False

# Test the function with sample strings
string = input("Enter string: ")
if is_string_ending_with_alphanumeric(string):
  print(f"'{string}' ends with an alphanumeric character.")
else:
  print(f"'{string}' does not end with an alphanumeric character.")

import re

def extract_hashtags(input_text):
    # Define a regular expression pattern to match hashtags
    pattern = r'#\w+'

    # Use the findall method to extract hashtags from the input text
    hashtags = re.findall(pattern, input_text)

    return hashtags

# Test the function with a sample input text
input_text = input("Enter a sentence: ")
result = extract_hashtags(input_text)
print(result)

import re

def remove_U_symbols(input_text):
    # Define a regular expression pattern to match '<U+..>'-like symbols
    pattern = r'<U\+[0-9A-Fa-f]+>'

    # Use the sub method to replace matched symbols with an empty string
    cleaned_text = re.sub(pattern, '', input_text)

    return cleaned_text

# Test the function with a sample input text
input_text = input("Enter a sentence: ")
result = remove_U_symbols(input_text)
print(result)

import re

def extract_dates_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            text = file.read()

            # Define a regular expression pattern to match dates in the format "dd-mm-yyyy"
            pattern = r'\d{2}-\d{2}-\d{4}'

            # Use the findall method to extract all matching dates from the text
            dates = re.findall(pattern, text)

            return dates
    except FileNotFoundError:
        print(f"File '{file_path}' not found.")
        return []

# Test the function with the file path
file_path = '/content/sample_data/Sample'
extracted_dates = extract_dates_from_file(file_path)

if extracted_dates:
    print("Extracted Dates:")
    for date in extracted_dates:
        print(date)
else:
    print("No dates found in the text.")

import re

def remove_words_of_length_between_2_and_4(input_string):
    # Define a regular expression pattern to match words with 2 to 4 characters
    pattern = re.compile(r'\b\w{2,4}\b')

    # Use the sub method to replace matched words with an empty string
    modified_string = pattern.sub('', input_string)

    return modified_string


input_string = input("Enter a Sentence: ")
result = remove_words_of_length_between_2_and_4(input_string)
print(result)